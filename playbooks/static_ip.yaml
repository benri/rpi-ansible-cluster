---
- name: Setup SSH
  vars_files:
    - ../vault/vars.yaml
  hosts: all
  tasks:
    - name: Set authorized key
      authorized_key:
        user: pi
        state: present
        key: "{{ lookup('file', pub_key_loc) }}"
- name: Enable VNC
  hosts: all
  tasks:
    - name: Enable VNC server in systemd system
      become: true
      file:
        src: /usr/lib/systemd/system/vncserver-x11-serviced.service
        dest: /etc/systemd/system/multi-user.target.wants/vncserver-x11-serviced.service
        state: link
    - name: Start VNC service daemon
      become: true
      systemd:
        name: vncserver-x11-serviced
        state: started
        enabled: true
- name: Setup static ip
  vars_files:
    - ../vault/vars.yaml
  hosts: all
  tasks:
    - name: Set the current MAC address
      set_fact:
        pi_mac_address: "{{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress }}"
    - name: Set variables based on MAC address
      set_fact:
        pi_hostname: "{{ mac_address_mapping[pi_mac_address].name }}"
        pi_ip_address: "{{ mac_address_mapping[pi_mac_address].ip }}"
        pi_eth0_ip_address: "{{ mac_address_mapping[pi_mac_address].eth0_ip }}"
    - name: Set hostname
      become: true
      hostname:
        name: "{{ pi_hostname }}"
      register: set_hostname_result
    - name: Replace hostname in /etc/hosts
      become: true
      replace:
        path: /etc/hosts
        regexp: '(\s+)raspberrypi(\s+.*)?$'
        replace: '\1{{ pi_hostname }}\2'
    - name: Register router ip
      shell: ip r | grep default | awk '/default/ {print $3}'
      register: router_ip
    - name: Register default network
      shell: ip r | grep default | awk '/default/ {print $5}'
      register: default_network
    - name: Insert/Update static ip in dhcpcd.conf [DEFAULT]
      become: true
      when: (pi_ip_address is defined) and (pi_ip_address|length > 0)
      blockinfile:
        path: /etc/dhcpcd.conf
        marker: "### {mark} ANSIBLE MANAGED BLOCK [{{ default_network.stdout }}]"
        block: |
          interface {{ default_network.stdout }}
          static ip_address={{ pi_ip_address }}/24
          static routers={{ router_ip.stdout }}
          static domain_name_servers={{ router_ip.stdout }} {{ dns_nameservers | join(' ') }}
      register: task_result
    - name: Insert/Update static ip in dhcpcd.conf [ETH0]
      become: true
      when: (pi_eth0_ip_address is defined) and (pi_eth0_ip_address|length > 0)
      blockinfile:
        path: /etc/dhcpcd.conf
        marker: "### {mark} ANSIBLE MANAGED BLOCK [eth0]"
        block: |
          interface eth0
          static ip_address={{ pi_eth0_ip_address }}/24
          static routers={{ router_ip.stdout }}
          static domain_name_servers={{ router_ip.stdout }} {{ dns_nameservers | join(' ') }}
      register: task_result2
    - name: Reboot the machine
      become: true
      when: set_hostname_result is changed or task_result is changed or task_result2 is changed
      # reboot:
      #   post_reboot_delay: 60
      #   reboot_timeout: 120
      shell: "sleep 5 && reboot"
      async: 1
      poll: 0
    - name: Wait for the machine to come back online
      wait_for_connection:
        connect_timeout: 60
        sleep: 5
        delay: 5
        timeout: 120
